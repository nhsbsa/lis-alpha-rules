package uk.nhs.nhsbsa.lis.rules.v1.droolsengine.assessment;
 
import uk.nhs.nhsbsa.lis.rules.v1.model.LisApplication;
import uk.nhs.nhsbsa.lis.rules.v1.model.AssessmentCalculation;
import uk.nhs.nhsbsa.lis.rules.v1.model.*;
import uk.nhs.nhsbsa.lis.rules.v1.droolsengine.model.*;
import uk.nhs.nhsbsa.lis.rules.v1.droolsengine.HelperFunctions;
import java.time.LocalDateTime;
import java.time.LocalDate;
import java.util.List;
import java.math.BigDecimal;

rule "Has Applicant"
	salience 100
    when
        lisApplication : LisApplication( applicant != null, myApplicant : applicant )
        assessmentCalc : AssessmentCalculation()
    then
    	HelperFunctions.logRule(assessmentCalc,"Has Applicant");
end

rule "Is Single"
	salience 100
 	when
        lisApplication : LisApplication( applicant != null, partner == null, myApplicant : applicant )
        assessmentCalc : AssessmentCalculation()
    then
    	HelperFunctions.logRule(assessmentCalc,"Is Single");
    	assessmentCalc.setHasPartner(false);
end

rule "Has Partner"
	salience 100
 	when
        lisApplication : LisApplication( applicant != null, partner != null, myPartner : partner )
        assessmentCalc : AssessmentCalculation()
    then
    	HelperFunctions.logRule(assessmentCalc,"Has Partner");
    	assessmentCalc.setHasPartner(true);
end

rule "Has Non Dependents"
	salience 100
 	when
        lisApplication : LisApplication( applicant != null, nonDependants != null, myNonDependents : nonDependants )
        assessmentCalc : AssessmentCalculation()
    then	
    	HelperFunctions.logRule(assessmentCalc, "Has Non Dependants" );
end

rule "Has Dependents"
	salience 100
 	when
        lisApplication : LisApplication( applicant != null, dependants != null, myDependents : dependants )
        assessmentCalc : AssessmentCalculation()
    then
    	HelperFunctions.logRule(assessmentCalc, "Has Dependants" );
end

rule "Applicant Age Calculation"
	salience 90
	when
	    $person : Person ( type == PersonType.MAIN_APPLICANT )
	    $age : Age ( person == $person )
	    $assessmentCalc : AssessmentCalculation()
	then
		HelperFunctions.logRule($assessmentCalc, "Applicant Age Calculation" );
		$assessmentCalc.setMainClaimantAge($age.getValue()); 
end

rule "Partner Age Calculation"
	salience 90
    when
        $person : Person ( type == PersonType.PARTNER )
        $age : Age ( person == $person )
        $assessmentCalc : AssessmentCalculation()
    then
        HelperFunctions.logRule($assessmentCalc, "Partner Age Calculation" );
        $assessmentCalc.setParterAge($age.getValue()); 
end

rule "Community Charge Rule"
	salience 80
when 
		lisApplication : LisApplication( applicant != null, myApplicant : applicant )
		assessmentCalc : AssessmentCalculation()
	then
		HelperFunctions.logRule(assessmentCalc,"Community Charge Rule");
		List<String> communityCharge = HelperFunctions.communityChargeCalculation(myApplicant);
		
		if(communityCharge.size()>0){
			// TODO assume only 1 community charge for now, but what about duplicates?
			assessmentCalc.setCouncilTax(Double.parseDouble(communityCharge.get(0)));
		}
end

rule "Rent Rule"
	salience 80
when 
		lisApplication : LisApplication( applicant != null, myApplicant : applicant )
		assessmentCalc : AssessmentCalculation()
	then
		HelperFunctions.logRule(assessmentCalc,"Rent Rule");
		
		List<String> rent = HelperFunctions.rentCalculation(myApplicant);
		if(rent.size()>0){
			// TODO assume only 1 rent for now, but what about duplicates?
			assessmentCalc.setRent(Double.parseDouble(rent.get(0)));
		}
end

rule "Mortgage Rule"
	salience 80
when 
		lisApplication : LisApplication( applicant != null, myApplicant : applicant )
		assessmentCalc : AssessmentCalculation()
	then
		HelperFunctions.logRule(assessmentCalc,"Mortgage Rule");
		
		List<String> mortgage = HelperFunctions.mortgageCalculation(myApplicant);
		if(mortgage.size()>0){
			// TODO assume only 1 mortgage for now, but what about duplicates?
			assessmentCalc.setMortgage(Double.parseDouble(mortgage.get(0)));
		}
end


rule "State Pension Rule"
	salience 80
when 
		lisApplication : LisApplication( applicant != null, myApplicant : applicant )
		assessmentCalc : AssessmentCalculation()
	then
		HelperFunctions.logRule(assessmentCalc,"State Pension Rule");
		
		List<String> statePension = HelperFunctions.statePensionBenefit(myApplicant);
		HelperFunctions.sumIncomeList(assessmentCalc,statePension,"State Pension","Applicant");
end	

rule "Private Pension Rule"
	salience 80
when 
		lisApplication : LisApplication( applicant != null, myApplicant : applicant )
		assessmentCalc : AssessmentCalculation()
	then
		HelperFunctions.logRule(assessmentCalc,"Private Pension Rule");
		
		List<String> privatePension = HelperFunctions.privatePensionBenefit(myApplicant);
		HelperFunctions.sumIncomeList(assessmentCalc,privatePension,"Private Pension","Applicant");
end	


	